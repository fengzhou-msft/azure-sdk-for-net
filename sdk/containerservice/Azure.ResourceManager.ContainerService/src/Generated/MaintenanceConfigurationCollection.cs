// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ContainerService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ContainerService
{
    /// <summary> A class representing collection of MaintenanceConfiguration and their operations over its parent. </summary>
    public partial class MaintenanceConfigurationCollection : ArmCollection, IEnumerable<MaintenanceConfiguration>, IAsyncEnumerable<MaintenanceConfiguration>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly MaintenanceConfigurationsRestOperations _maintenanceConfigurationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MaintenanceConfigurationCollection"/> class for mocking. </summary>
        protected MaintenanceConfigurationCollection()
        {
        }

        /// <summary> Initializes a new instance of MaintenanceConfigurationCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal MaintenanceConfigurationCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _maintenanceConfigurationsRestClient = new MaintenanceConfigurationsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ManagedCluster.ResourceType;

        // Collection level operations.

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}
        /// OperationId: MaintenanceConfigurations_CreateOrUpdate
        /// <summary> Creates or updates a maintenance configuration in the specified managed cluster. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="parameters"> The maintenance configuration to create or update. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual MaintenanceConfigurationCreateOrUpdateOperation CreateOrUpdate(string configName, MaintenanceConfigurationData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _maintenanceConfigurationsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configName, parameters, cancellationToken);
                var operation = new MaintenanceConfigurationCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}
        /// OperationId: MaintenanceConfigurations_CreateOrUpdate
        /// <summary> Creates or updates a maintenance configuration in the specified managed cluster. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="parameters"> The maintenance configuration to create or update. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<MaintenanceConfigurationCreateOrUpdateOperation> CreateOrUpdateAsync(string configName, MaintenanceConfigurationData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _maintenanceConfigurationsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new MaintenanceConfigurationCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}
        /// OperationId: MaintenanceConfigurations_Get
        /// <summary> Gets the specified maintenance configuration of a managed cluster. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> is null. </exception>
        public virtual Response<MaintenanceConfiguration> Get(string configName, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.Get");
            scope.Start();
            try
            {
                var response = _maintenanceConfigurationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MaintenanceConfiguration(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}
        /// OperationId: MaintenanceConfigurations_Get
        /// <summary> Gets the specified maintenance configuration of a managed cluster. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> is null. </exception>
        public async virtual Task<Response<MaintenanceConfiguration>> GetAsync(string configName, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.Get");
            scope.Start();
            try
            {
                var response = await _maintenanceConfigurationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new MaintenanceConfiguration(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> is null. </exception>
        public virtual Response<MaintenanceConfiguration> GetIfExists(string configName, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _maintenanceConfigurationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<MaintenanceConfiguration>(null, response.GetRawResponse())
                    : Response.FromValue(new MaintenanceConfiguration(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> is null. </exception>
        public async virtual Task<Response<MaintenanceConfiguration>> GetIfExistsAsync(string configName, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _maintenanceConfigurationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<MaintenanceConfiguration>(null, response.GetRawResponse())
                    : Response.FromValue(new MaintenanceConfiguration(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string configName, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(configName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string configName, CancellationToken cancellationToken = default)
        {
            if (configName == null)
            {
                throw new ArgumentNullException(nameof(configName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(configName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}
        /// OperationId: MaintenanceConfigurations_ListByManagedCluster
        /// <summary> Gets a list of maintenance configurations in the specified managed cluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MaintenanceConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MaintenanceConfiguration> GetAll(CancellationToken cancellationToken = default)
        {
            Page<MaintenanceConfiguration> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _maintenanceConfigurationsRestClient.ListByManagedCluster(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new MaintenanceConfiguration(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MaintenanceConfiguration> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _maintenanceConfigurationsRestClient.ListByManagedClusterNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new MaintenanceConfiguration(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}
        /// OperationId: MaintenanceConfigurations_ListByManagedCluster
        /// <summary> Gets a list of maintenance configurations in the specified managed cluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MaintenanceConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MaintenanceConfiguration> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<MaintenanceConfiguration>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _maintenanceConfigurationsRestClient.ListByManagedClusterAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new MaintenanceConfiguration(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MaintenanceConfiguration>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _maintenanceConfigurationsRestClient.ListByManagedClusterNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new MaintenanceConfiguration(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<MaintenanceConfiguration> IEnumerable<MaintenanceConfiguration>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<MaintenanceConfiguration> IAsyncEnumerable<MaintenanceConfiguration>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, MaintenanceConfiguration, MaintenanceConfigurationData> Construct() { }
    }
}
